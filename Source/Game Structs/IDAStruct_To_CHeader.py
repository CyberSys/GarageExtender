# IDAStruct_To_CHeader.py
#   By LINK/2012
fname = "IDA.TXT"
exceptions = ["CParticle", "CPool", "ScriptVar", "CRunningScript", "RwSphere", "RwV3D", "RxObjSPace3dVertex",

              "CGarage"]
undefcount = 0

def GetLineTokens(line):
    global undefcount
    
    result = []
    for t in line.split():
        result.append(t)

    if len(result) >= 5:
        if result[3] == ';' and result[4] == 'undefined':
            result.insert(1, "_undefined_" + str(undefcount))
            undefcount += 1
    
    return result

def IsAnything(t):
    if  len(t) < 2 or t[1] == ';':
        return False
    return True

def IsStartOfStruct(t):
    if len(t) >= 5 and t[2] == "struc":
        return True
    return False

def IsEndOfStruct(t):
    if len(t) >= 3 and t[2] == "ends":
        return True
    return False

def GetStructSizeStr(t):
    a = t[4].split('=')
    return a[1][0:-1]

def IsArray(t):
    if len(t) >= 4:
        if t[3] == "?": return False
        else: return True

def GetDatatype(t):
    a = ""
    if len(t) >= 3:
        if t[2] == "dd": a = "DWORD"
        elif t[2] == "dw": a = "WORD"
        elif t[2] == "db": a = "BYTE"
        else: a = t[2].replace("?", "")
    return a

def IsDependencie(a):
    if a != "DWORD" and a != "WORD" and a != "BYTE":
        return True
    return False


def ParseStruct(file, struct_name, struct_size_str):
    global undefcount
    undefcount = 0

    Struct = "#pragma pack(push, 1)\n" 
    Struct += "struct " + struct_name + "\t// sizeof = " + struct_size_str + "\n{"
    Dependencies = set()
            
    while True:
        Struct += "\n"
        line = file.readline()
        if line == "":
            input("FATAL")
            break
            
        t = GetLineTokens(line)
        
        if IsEndOfStruct(t):
            Struct += "};"
            break
        else:
            Type = GetDatatype(t)
            if IsDependencie(Type):
                Dependencies.add(Type)
            Struct += "\t"
            Struct += Type          # ADD DATATYPE
            Struct += " " + t[1].replace("?", "")    # ADD OBJ NAME
            if(IsArray(t)): Struct += '[' + t[3] + ']'
            Struct += ';'

    Struct += "\n#pragma pack(pop)\n"
    Struct += "\nstatic_assert(sizeof(" + struct_name + ") == " + struct_size_str + ", " + '"Incorrect struct size: ' + struct_name + '");'

    with open(struct_name + '.h', "w") as f:
        f.write("// Generated by IDAStruct_To_CHeader.py\n#pragma once\n#include <windows.h>\n")
        for a in Dependencies:
            f.write('#include "' + a + '.h' + '"\n')
        f.write('\n\n')
        f.write(Struct)

    return None


def main():
    global fname
    inStruct = False
    
    with open(fname, "r") as f:
        while True:
            line = f.readline()
            if line == "": break  # IS EOF?
            if line.endswith("\n"): line = line[0:-1]
            t = GetLineTokens(line)
            
            if not IsAnything(t): continue
            if inStruct:
              if IsEndOfStruct(t):
                  inStruct = False
                  continue
            elif IsStartOfStruct(t):
                if t[1] in exceptions:
                    inStruct = True
                    continue
                print(t[1])
                ParseStruct(f, t[1], GetStructSizeStr(t))






























if __name__=="__main__": main()
